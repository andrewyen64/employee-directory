{"version":3,"sources":["utils/DataAreaContext.js","components/DataBody/index.js","components/DataTable/index.js","components/Search/index.js","components/Nav/index.js","utils/API.js","components/DataArea/index.js","components/Container/index.js","components/Wrapper/index.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","title","url","DataBody","context","useContext","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","DataTable","id","headings","width","style","onClick","handleSort","toLowerCase","SearchName","type","placeholder","aria-label","onChange","e","handleSearchChange","Nav","axios","get","DataArea","useState","users","order","setDeveloperState","useEffect","API","then","results","data","Provider","value","event","filter","filteredList","item","indexOf","heading","sortedUsers","sort","a","b","localeCompare","length","Container","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f6d2ac1a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst DataAreaContext = React.createContext({\n  title: \"\",\n  url: \"\"\n});\n\nexport default DataAreaContext;\n","import React, { useContext } from \"react\";\nimport DataAreaContext from \"../../utils/DataAreaContext\"\nimport \"./DataBody.css\"\n\nconst DataBody = () => {\n    const context = useContext(DataAreaContext);\n\n    function formatDate(date){\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDate =[month, day, year].join(\"-\");\n        return formattedDate;\n    }\n    return (\n      <tbody>\n        {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\n          context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\n            return (\n              <tr key={login.uuid}>\n                <td data-th=\"Image\" className=\"align-middle\">\n                  <img\n                    src={picture.medium}\n                    alt={\"profile image for \" + name.first + \" \" + name.last}\n                    className=\"img-responsive\"\n                  />\n                </td>\n                <td data-th=\"Name\" className=\"name-cell align-middle\">\n                  {name.first} {name.last}\n                </td>\n                <td data-th=\"Phone\" className=\"align-middle\">\n                  {phone}\n                </td>\n                <td data-th=\"Email\" className=\"align-middle\">\n                  <a href={\"mailto:\" + email} target=\"__blank\">\n                    {email}\n                  </a>\n                </td>\n                <td data-th=\"DOB\" className=\"align-middle\">\n                  {formatDate(dob.date)}\n                </td>\n              </tr>\n            );\n          })\n        ) : (\n          <div></div>\n        )}\n      </tbody>\n    );\n  }\n  \n  export default DataBody;","import React, { useContext } from \"react\";\nimport DataBody from \"../DataBody\";\nimport \"./DataTable.css\";\nimport DataAreaContext from \"../../utils/DataAreaContext\";\n\nconst DataTable = () => {\n    const context = useContext(DataAreaContext);\n\n    return (\n        <div className=\"datatable mt-5\">\n            <table id=\"table\" className=\"table table-striped table-hover table-condensed\">\n                <thead>\n                    <tr>\n                        {context.developerState.headings.map(({ name, width }) => {\n                            return (\n                                <th className=\"col\"\n                                    key={name}\n                                    style={{ width }}\n                                    onClick={ () => {\n                                        context.handleSort(name.toLowerCase());\n                                    }}\n                                >\n                                    {name}\n                                    <span className=\"pointer\"></span>\n                                </th>\n                            );\n                        })}\n                    </tr>\n                </thead>\n                <DataBody />\n            </table>\n        </div>\n    );\n}\n\nexport default DataTable;","import React, { useContext } from \"react\";\nimport DataAreaContext from \"../../utils/DataAreaContext\";\nimport \"./Search.css\";\n\nconst SearchName = () => {\n    const context = useContext(DataAreaContext);\n\n    return (\n        <div className=\"searchbox\">\n            <form className=\"form-inline\">\n                <input className=\"form-control mr-sm-2\"\n                    type=\"search\"\n                    placeholder=\"Search by Name\"\n                    aria-label=\"Search\"\n                    onChange={e => context.handleSearchChange(e)}\n                />\n                <button className=\"btn my-2 my-sm-0\" type=\"submit\">\n                    Search\n                </button>\n            </form>\n        </div>\n    );\n}\nexport default SearchName;","import React from 'react';\nimport Search from \"../Search\";\nimport \"./Nav.css\";\n\nfunction Nav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"search-area col-4\">\n                <Search />\n            </div>\n        </nav>\n    );\n}\nexport default Nav;","import axios from \"axios\";\n\nexport default {\n    getEmployees: function() {\n        return axios.get(\"https://randomuser.me/api/?results=640&nat=us\");\n    }\n}\n","import React, {useState, useEffect} from \"react\";\nimport DataTable from \"../DataTable\";\nimport Nav from \"../Nav\";\nimport API from \"../../utils/API\";\nimport DataAreaContext from \"../../utils/DataAreaContext\"\nimport \"./DataArea.css\";\n\n\nconst DataArea = () => {\n  const [developerState, setDeveloperState] = useState({\n    users: [],\n    order: \"ascend\",\n    filteredUsers: [],\n    headings: [\n      { name: \"Image\", width: \"8%\" },\n      { name: \"Name\", width: \"10%\" },\n      { name: \"Phone\", width: \"10%\" },\n      { name: \"Email\", width: \"15%\" },\n      { name: \"DOB\", width: \"8%\" }\n    ]\n  });\n\n  const handleSort = heading => {\n    if (developerState.order === \"descend\") {\n      setDeveloperState({\n        order:\"ascend\"\n      });\n    } else {\n      setDeveloperState({\n        order:\"descend\"\n      });\n    }\n\n    const compareFnc = (a, b) => {\n      if (developerState.order === \"ascend\") {\n        if (a[heading] === undefined) {\n          return 1;\n        } else if (b[heading] === undefined) {\n          return -1;\n        } else if (heading === \"name\") {\n          return a[heading].first.localeCompare(b[heading].first);\n        } else {\n          return b[heading] - a[heading];\n        } \n      } else {\n        if (a[heading] === undefined){\n                return 1;\n        } else if (b[heading] === undefined){\n                return -1;\n        } else if (heading ===\"name\"){\n                return b[heading].first.localeCompare(a[heading].first);\n        } else {\n                return b[heading]-  a[heading];\n            }\n        }\n    }\n\n    const sortedUsers = developerState.filteredUsers.sort(compareFnc);\n\n    setDeveloperState({\n      ...developerState,\n      filteredUsers: sortedUsers\n    });\n\n  };\n    \n  useEffect(() => {\n    API.getEmployees().then(results => {\n      setDeveloperState({\n        ...developerState,\n        users: results.data.results,\n        filteredUsers: results.data.results\n      });\n    });\n  }, []);\n   \n  const handleSearchChange = event => {\n    const filter = event.target.value;\n    const filteredList = developerState.users.filter(item => {\n      let values = item.name.first.toLowerCase();\n      return values.indexOf(filter.toLowerCase()) !== -1;\n    });\n  \n    setDeveloperState({ \n      ...developerState, \n      filteredUsers: filteredList \n    });\n  };\n  \n  return (\n    <DataAreaContext.Provider\n      value={{ developerState, handleSearchChange, handleSort }}\n    >\n    <Nav />\n    <div className=\"data-area\">\n      {developerState.filteredUsers.length > 0 ? <DataTable />: \n        <div></div>\n      }\n    </div>\n    </DataAreaContext.Provider>\n  );\n}\n    \nexport default DataArea;","import React from \"react\";\nimport DataArea from \"../DataArea/index.js\";\nimport \"./Container.css\";\n\nfunction Container (){\n    return (\n        <div>\n        <DataArea />\n        </div>\n    );\n};\n\nexport default Container;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nfunction Wrapper ({ children }){\n    return (\n        <div className=\"wrapper\">\n            { children }\n        </div>\n    );\n}\nexport default Wrapper;","import React from \"react\";\nimport \"./Header.css\";\n\nfunction Header () {\n    return (\n        <div className=\"header\">\n            <h1> Employee Directory </h1>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport Container from './components/Container'\nimport Wrapper from './components/Wrapper';\nimport Header from './components/Header';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n          <Header/>\n          <Container/>\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}